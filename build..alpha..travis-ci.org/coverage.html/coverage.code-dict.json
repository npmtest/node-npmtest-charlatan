{"/home/travis/build/npmtest/node-npmtest-charlatan/test.js":"/* istanbul instrument in package npmtest_charlatan */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-charlatan/lib.npmtest_charlatan.js":"/* istanbul instrument in package npmtest_charlatan */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_charlatan = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_charlatan = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-charlatan/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-charlatan && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_charlatan */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_charlatan\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_charlatan.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_charlatan.rollup.js'] =\n            local.assetsDict['/assets.npmtest_charlatan.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_charlatan.__dirname + '/lib.npmtest_charlatan.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/index.js":"'use strict';\n\nmodule.exports = require('./lib/charlatan');\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan.js":"'use strict';\n\n/**\n * class Charlatan\n *\n **/\n\nexports.Address     = require('./charlatan/address');\nexports.App         = require('./charlatan/app');\nexports.Avatar      = require('./charlatan/avatar');\nexports.Bitcoin     = require('./charlatan/bitcoin');\nexports.Business    = require('./charlatan/business');\nexports.Code        = require('./charlatan/code');\nexports.Commerce    = require('./charlatan/commerce');\nexports.Company     = require('./charlatan/company');\nexports.Date        = require('./charlatan/date');\nexports.Finance     = require('./charlatan/finance');\nexports.Hacker      = require('./charlatan/hacker');\nexports.Internet    = require('./charlatan/internet');\nexports.Lorem       = require('./charlatan/lorem');\nexports.Name        = require('./charlatan/name');\nexports.Number      = require('./charlatan/number');\nexports.PhoneNumber = require('./charlatan/phone_number');\nexports.Team        = require('./charlatan/team');\nvar Helpers         = exports.Helpers = require('./charlatan/helpers');\n\n// already loaded locales {<<locale_name>>: <<locale_data>>}\nvar locales   = require('./locales').locales;\nvar addLocale = exports.addLocale = require('./locales').addLocale;\n\n\nvar current_locale;\nvar base_locale = 'en';\n\nvar Numbers  = Helpers.range('0', '9');\nvar ULetters = Helpers.range('A', 'Z');\nvar Letters  = ULetters.concat(Helpers.range('a', 'z'));\n\n\n// getValue(data, path) -> mixed\n// - data (object): locale\n// - path (array): path to property\n//\n// get value from locale hash\nfunction getValue(data, path) {\n  if (typeof data !== 'object' || data === null) {\n    return void 0;\n  } else if (path.length === 1) {\n    return data[path[0]];\n  }\n  return getValue(data[path[0]], path.slice(1));\n}\n\n\n// snake2camelcase(str) -> string\n// - str (string): source string\n//\n// locale files use snake notation `xxx_yyy_zzz`\n// but real methods use camelcase `xxxYyyZzz`\nfunction snake2camelcase(str) {\n  return str.replace(/(\\_[a-z])/g, function ($1) {\n    return $1.toUpperCase().replace('_', '');\n  });\n}\n\n\n/**\n * Charlatan.setLocale([name]) -> void\n * - name (String): locale name, for example `en-US`\n *\n * Set current locale. If name is not defined, revert back to default locale.\n **/\nexports.setLocale = function (name) {\n  if (!name) {\n    name = base_locale;\n  }\n  if (!locales[name]) {\n    addLocale(name);\n  }\n  current_locale = name;\n  return true;\n};\n\n\n/**\n * Charlatan.getLocale() -> String\n *\n * Get current locale\n **/\nexports.getLocale = function () {\n  return current_locale;\n};\n\n\n/**\n * Charlatan.getAllLocales() -> [String]\n *\n * Get the list of all available locales\n **/\nexports.getAllLocales = function () {\n  return Object.keys(locales);\n};\n\n\n/**\n * Charlatan.translate(key) -> mixed\n * - key (string): key in locale, for example `address.city_prefix`\n *\n * Returns a phrase from the locale.\n *\n * Fallbacks to base language (and then to `en`)\n *   if it was not found: `ru-RU -> ru -> en`\n **/\nexports.translate = function (key, options) {\n  if (!options) { options = {}; }\n\n  var locale = options.locale || current_locale;\n  var lang = locale.split('-')[0];\n  var path = key.split('.');\n  var result = getValue(locales[locale], path);\n\n  // fallback to root lang (`pt-BR` -> `pt`, but it can be missed)\n  if (typeof result === 'undefined' && lang !== locale) {\n    if (locales[lang]) {\n      result = getValue(locales[lang], path);\n    }\n  }\n\n  // fallback to base lang (en)\n  if (typeof result === 'undefined') {\n    result = getValue(locales[base_locale], path);\n  }\n\n  // oops\n  if (typeof result === 'undefined') {\n    throw new Error('Invalid path: ' + key);\n  }\n\n  return result;\n};\n\n\n/**\n * Charlatan.fetch(key) -> mixed\n * - key (string): key in locale, for example `address.city_prefix`\n *\n * Helper for the common approach of grabbing a translation\n * with an array of values and selecting one of them.\n **/\nvar fetch = exports.fetch = function (key) {\n  var fetched = exports.translate(key);\n\n  if (Array.isArray(fetched)) {\n    fetched = Helpers.sample(fetched);\n  }\n\n  if (fetched.match(/^\\//) && fetched.match(/\\/$/)) {\n    fetched = exports.regexify(fetched);\n  }\n\n  return fetched;\n};\n\n\n/**\n * Charlatan.parse(key) -> string\n * - key (string): key in locale, for example `address.city_prefix`\n *\n * Load formatted strings from the locale, \"parsing\" them\n * into method calls that can be used to generate a\n * formatted translation: e.g., \"#{first_name} #{last_name}\".\n **/\nexports.parse = function (key) {\n  var re = /#\\{([A-Za-z]+(?:\\.))?([^\\}]+)\\}/g;\n\n  return fetch(key).replace(re, function (match, kls, method) {\n    var text = '';\n\n    // If the token had a class Prefix (e.g., Name.first_name)\n    // take it, otherwise use base namespace part\n    if (!kls) {\n      kls = exports.Helpers.capitalize(key.split('.')[0]);\n    } else {\n      kls = kls.slice(0, -1);\n    }\n    // If the class has the method, call it, otherwise\n    // fetch the translation\n    if (exports[kls] &&\n        typeof exports[kls][snake2camelcase(method)] === 'function') {\n\n      text += exports[kls][snake2camelcase(method)].call(exports[kls]);\n    } else {\n      text += exports.fetch(kls.toLowerCase() + '.' + method);\n    }\n\n    return text;\n  });\n};\n\n\n/**\n * Charlatan.numerify(source) -> string\n * - source (string): source string\n *\n * Find `#` symbol and replace it with random number\n **/\nexports.numerify = function (source) {\n  // make sure numerify results don’t start with a zero\n  return source\n    .replace(/\\#/, function () {\n      return Math.floor(Helpers.rand(10, 1));\n    })\n    .replace(/\\#/g, function () {\n      return Math.floor(Helpers.rand(10, 0));\n    });\n};\n\n\n/**\n * Charlatan.letterify(source) -> string\n * - source (string): source string\n *\n * Find `?` symbol and replace it with random char from [A..Z]\n **/\nexports.letterify = function (source) {\n  return source.replace(/\\?/g, function () {\n    return Helpers.sample(ULetters);\n  });\n};\n\n\n/**\n * Charlatan.bothify(source) -> string\n * - source (string): source string\n *\n * Perform both `letterify` and `numerify` operations.\n **/\nexports.bothify = function (source) {\n  return exports.letterify(exports.numerify(source));\n};\n\n\n/**\n * Charlatan.regexify(re) -> String\n * - re(RegExp | String): regexp to sample from\n *\n * Given a regular expression, attempt to generate a string\n * that would match it.  This is a rather simple implementation,\n * so don't be shocked if it blows up on you in a spectacular fashion.\n *\n * It does not handle ., *, unbounded ranges such as {1,},\n * extensions such as (?=), character classes, some abbreviations\n * for character classes, and nested parentheses.\n *\n * I told you it was simple. :) It's also probably dog-slow,\n * so you shouldn't use it.\n *\n * It will take a regex like this:\n *\n * /^[A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {1,2}[0-9][ABD-HJLN-UW-Z]{2}$/\n *\n * and generate a string like this:\n *\n * \"U3V  3TP\"\n **/\nexports.regexify = function (re) {\n  // Handle either a Regexp or a String that looks like a Regexp\n  if (Object.prototype.toString.call(re) === '[object RegExp]') {\n    re = re.source;\n  }\n\n  // \"baz\", 2, 3 -> \"bazbaz\" or \"bazbazbaz\"\n  function repeatRange(_unused, what, from, to) {\n    return new Array(Helpers.rand(Number(to) + 1, Number(from)) + 1).join(what);\n  }\n\n  return re\n    // Ditch the anchors\n    .replace(/^\\/?\\^?/, '').replace(/\\$?\\/?$/, '')\n\n    // All {2} become {2,2} and ? become {0,1}\n    .replace(/\\{(\\d+)\\}/g, '{$1,$1}').replace(/\\?/g, '{0,1}')\n\n    // [12]{1,2} becomes [12] or [12][12]\n    .replace(/(\\[[^\\]]+\\])\\{(\\d+),(\\d+)\\}/g, repeatRange)\n\n    // (12|34){1,2} becomes (12|34) or (12|34)(12|34)\n    .replace(/(\\([^\\)]+\\))\\{(\\d+),(\\d+)\\}/g, repeatRange)\n\n    // A{1,2} becomes A or AA or \\d{3} becomes \\d\\d\\d\n    .replace(/(\\\\?.)\\{(\\d+),(\\d+)\\}/g, repeatRange)\n\n    // (this|that) becomes 'this' or 'that'\n    .replace(/\\((.*?)\\)/g, function (match) {\n      return Helpers.sample(match.replace(/[\\(\\)]/g, '').split('|'));\n    })\n\n    // All A-Z inside of [] become C (or X, or whatever)\n    .replace(/\\[([^\\]]+)\\]/g, function (match) {\n      return match.replace(/(\\w\\-\\w)/g, function (range) {\n        range = range.split('-');\n\n        return Helpers.sample(Helpers.range(range[0], range[1]));\n      });\n    })\n\n    // All [ABC] become B (or A or C)\n    .replace(/\\[([^\\]]+)\\]/g, function (m, str) {\n      return Helpers.sample(str.split(''));\n    })\n\n    .replace(/\\\\d/g, function () {\n      return Helpers.sample(Numbers);\n    })\n\n    .replace(/\\\\w/g, function () {\n      return Helpers.sample(Letters);\n    });\n};\n\n\n// Init Charlatan\nexports.setLocale(base_locale);\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/address.js":"'use strict';\n\n/**\n * class Charlatan.Address\n **/\n\n\nvar Charlatan = require('../charlatan');\n\n\n/**\n * Charlatan.Address.zipCode([stateAbbr]) -> String\n * - state_abbr(String): use postcode ranges only for specified US state\n *\n * Generate zip code.\n **/\n/** alias of: Charlatan.Address.zipCode\n * Charlatan.Address.postcode() -> String\n **/\n/** alias of: Charlatan.Address.zipCode\n * Charlatan.Address.zip() -> String\n **/\nexports.postcode = exports.zip = exports.zipCode = function (state_abbr) {\n  if (!state_abbr) {\n    return Charlatan.bothify(Charlatan.fetch('address.postcode'));\n  }\n\n  return Charlatan.bothify(Charlatan.fetch('address.postcode_by_state.' + state_abbr));\n};\n\n\n/**\n * Charlatan.Address.city() -> String\n *\n * Generate city name. For example 'Port Marianashire'\n **/\nexports.city = function () {\n  return Charlatan.parse('address.city');\n};\n\n\n/**\n * Charlatan.Address.streetName() -> String\n *\n * Generate street name. For example 'Schuster borough'\n **/\nexports.streetName = function () {\n  return Charlatan.parse('address.street_name');\n};\n\n\n/**\n * Charlatan.Address.streetAddress(include_secondary = false) -> String\n * - include_secondary(Boolean): add apartment/suite part\n *\n * Generate street address. For example 'Schuster borough'\n **/\nexports.streetAddress = function (include_secondary) {\n  return Charlatan.numerify(Charlatan.parse('address.street_address') +\n                (include_secondary ? ' ' + exports.secondaryAddress() : ''));\n};\n\n\n/**\n * Charlatan.Address.secondaryAddress() -> String\n *\n * Generate secodary address part Apt/Suite.\n **/\nexports.secondaryAddress = function () {\n  return Charlatan.numerify(Charlatan.fetch('address.secondary_address'));\n};\n\n\n/**\n * Charlatan.Address.buildingNumber() -> String\n *\n * Generate building number.\n **/\nexports.buildingNumber = function () {\n  return Charlatan.bothify(Charlatan.fetch('address.building_number'));\n};\n\n\n/**\n * Charlatan.Address.timeZone() -> String\n *\n * Return random timeZone.\n **/\nexports.timeZone = function () {\n  return Charlatan.fetch('address.time_zone');\n};\n\n\n/**\n * Charlatan.Address.streetSuffix() -> String\n *\n * Return random street suffix.\n **/\nexports.streetSuffix = function () {\n  return Charlatan.fetch('address.street_suffix');\n};\n\n\n/**\n * Charlatan.Address.citySuffix() -> String\n *\n * Return random city suffix.\n **/\nexports.citySuffix = function () {\n  return Charlatan.fetch('address.city_suffix');\n};\n\n\n/**\n * Charlatan.Address.cityPrefix() -> String\n *\n * Return random city prefix.\n **/\nexports.cityPrefix = function () {\n  return Charlatan.fetch('address.city_prefix');\n};\n\n\n/**\n * Charlatan.Address.stateAbbr() -> String\n *\n * Return random state abbreviation.\n **/\nexports.stateAbbr = function () {\n  return Charlatan.fetch('address.state_abbr');\n};\n\n\n/**\n * Charlatan.Address.state() -> String\n *\n * Return random state name.\n **/\nexports.state = function () {\n  return Charlatan.fetch('address.state');\n};\n\n\n\n/**\n * Charlatan.Address.country() -> String\n *\n * Return random country.\n **/\nexports.country = function () {\n  return Charlatan.fetch('address.country');\n};\n\n\n/**\n * Charlatan.Address.countryCode() -> String\n *\n * Return random country code.\n **/\nexports.countryCode = function () {\n  return Charlatan.fetch('address.country_code');\n};\n\n\n/**\n * Charlatan.Address.latitude() -> string\n *\n * Generate latitude\n **/\nexports.latitude = function () {\n  return ((Math.random() * 180) - 90).toString();\n};\n\n\n/**\n * Charlatan.Address.longitude() ->string\n *\n * Generate longitude\n **/\nexports.longitude = function () {\n  return ((Math.random() * 360) - 180).toString();\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/app.js":"'use strict';\n\n/**\n * class Charlatan.App\n **/\n\nvar Charlatan = require('../charlatan');\n\n\n/**\n *  Charlatan.App.name() -> String\n *\n *  Generate an application name\n **/\nexports.name = function () {\n  return Charlatan.fetch('app.name');\n};\n\n\n/**\n *  Charlatan.App.version() -> String\n *\n *  Generate an application version\n **/\nexports.version = function () {\n  return Charlatan.numerify(Charlatan.parse('app.version'));\n};\n\n\n/**\n *  Charlatan.App.author() -> String\n *\n *  Generate an application author\n **/\nexports.author = function () {\n  return Charlatan.fetch('app.author');\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/avatar.js":"'use strict';\n\n/**\n * class Charlatan.Avatar\n **/\n\n\nvar Charlatan = require('../charlatan');\n\nvar SUPPORTED_FORMATS = [ 'png', 'jpg', 'bmp' ];\n\n/**\n * Charlatan.Avatar.image(slug=null, size='300x300', format='png') -> String\n * - slug(String): slug:)\n * - size(String): avatar size\n * - format(String): image format ('png', 'jpg' or 'bmp')\n *\n * Generate link to robohash avatar\n **/\nexports.image = function (slug, size, format) {\n  if (!slug) {\n    slug = Charlatan.Lorem.words().join('');\n  }\n  if (!size) {\n    size = '300x300';\n  }\n  if (!format) {\n    format = 'png';\n  }\n\n  if (!size.match(/^[0-9]+x[0-9]+$/)) {\n    throw new Error('Size should be specified in format 300x300');\n  }\n  if (SUPPORTED_FORMATS.indexOf(format) === -1) {\n    throw new Error('Supported formats are ' + SUPPORTED_FORMATS.join(', '));\n  }\n\n  return 'http://robohash.org/' + slug + '.' + format + '?size=' + size;\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/bitcoin.js":"\n'use strict';\n\n/**\n * class Charlatan.Bitcoin\n **/\n\nvar crypto = require('crypto');\n\n\nvar PROTOCOL_VERSIONS = {\n  main: 0,\n  testnet: 111\n};\n\n\n/** internal\n *  divide(buf, n) -> Number\n *   - buf(Buffer): divident\n *   - n(Number): divisor\n *\n *  Performs integer division of buf by n (modifying buf in-place)\n *  and returns a reminder.\n *\n *  `n` must be one digit (i.e. lower than 256)\n **/\nfunction divide(buf, n) {\n  /* eslint-disable no-bitwise */\n  var i = 0, l, t, rem;\n\n  t = buf[i];\n  rem = t % n;\n  buf[i] = Math.floor(t / n);\n\n  for (i = 1, l = buf.length; i < l; i++) {\n    t = rem * 256 + buf[i];\n    rem = t % n;\n    buf[i] = Math.floor(t / n);\n  }\n\n  return rem;\n}\n\n\n/** internal\n *  buffer_empty(buf) -> Boolean\n *   - buf(Buffer): buffer to check\n *\n *  Returns true iff all elements of a buffer are zero.\n **/\nfunction buffer_empty(buf) {\n  for (var i = buf.length - 1; i > 0; i--) {\n    if (buf[i]) { return false; }\n  }\n\n  return true;\n}\n\n\n/** internal\n *  base58(buf) -> String\n *   - buf(Buffer): buffer to encode\n *\n *  Encodes buffer to base58 format\n **/\nfunction base58(buf) {\n  var alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n  var base = alphabet.length;\n  var result = [];\n  var divident = new Buffer(buf.length);\n\n  buf.copy(divident);\n\n  while (!buffer_empty(divident)) {\n    result.unshift(alphabet[divide(divident, base)]);\n  }\n\n  for (var i = 0; i < buf.length && !buf[i]; i++) {\n    result.unshift(alphabet[0]);\n  }\n\n  return result.join('');\n}\n\n\n/** internal\n *  addressFor(network[, rnd]) -> String\n *   - network(String): network we're getting address for\n *   - rnd(Buffer): hash of a private key (generated randomly if not supplied)\n *\n *  Generate bitcoin address for a given network\n **/\nfunction addressFor(network, rnd) {\n  var version = PROTOCOL_VERSIONS[network];\n\n  //                      ver   payload  checksum\n  var packed = new Buffer('00' + rnd + '00112233', 'hex');\n\n  packed[0] = version;\n\n  var hash = crypto.createHash('sha256').update(packed.slice(0, packed.length - 4)).digest();\n\n  hash = crypto.createHash('sha256').update(hash).digest();\n\n  packed[packed.length - 4] = hash[0];\n  packed[packed.length - 3] = hash[1];\n  packed[packed.length - 2] = hash[2];\n  packed[packed.length - 1] = hash[3];\n\n  return base58(packed);\n}\n\n\n/**\n *  Charlatan.Bitcoin.address() -> String\n *\n *  Generate a valid bitcoin address\n **/\nexports.address = function () {\n  return addressFor('main', crypto.randomBytes(20).toString('hex'));\n};\n\n\n/**\n *  Charlatan.Bitcoin.testnetAddress() -> String\n *\n *  Generate a valid bitcoin address for testnet block chain\n **/\nexports.testnetAddress = function () {\n  return addressFor('testnet', crypto.randomBytes(20).toString('hex'));\n};\n\n\n// exported for tests\nexports._divide = divide;\nexports._base58 = base58;\nexports._addressFor = addressFor;\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/business.js":"'use strict';\n\n/**\n * class Charlatan.Business\n **/\n\n\nvar Charlatan = require('../charlatan');\n\n\n/**\n * Charlatan.Business.creditCardNumber() -> String\n *\n * Generate placeholder credit card number (out of range of the real\n * credit card numbers).\n *\n * If you want to generate real-looking credit card numbers,\n * use [[Charlatan.Finance.creditCard]] method.\n **/\nexports.creditCardNumber = function () {\n  return Charlatan.fetch('business.credit_card_numbers');\n};\n\n\n/**\n * Charlatan.Business.creditCardExpiryDate() -> Date\n *\n * Generate credit card expire date\n **/\nexports.creditCardExpiryDate = function () {\n  return new Date(Charlatan.fetch('business.credit_card_expiry_dates'));\n};\n\n\n/**\n * Charlatan.Business.creditCardType() -> Date\n *\n * Generate credit card type (visa, mastercard, etc.)\n **/\nexports.creditCardType = function () {\n  return Charlatan.fetch('business.credit_card_types');\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/code.js":"'use strict';\n\n/**\n * class Charlatan.Code\n **/\n\nvar Charlatan = require('../charlatan');\n\n\nfunction generate_base10_isbn() {\n  var values = Charlatan.regexify(/\\d{9}/);\n  var remainder = values.split('').reduce(function (acc, ch, i) {\n    return acc + Number(ch) * (10 - i);\n  }, 0);\n\n  remainder = (11 - (remainder % 11)) % 11;\n  return values + '-' + String(remainder === 10 ? 'X' : remainder);\n}\n\nfunction generate_base13_isbn() {\n  var values = Charlatan.regexify(/\\d{12}/);\n  var remainder = values.split('').reduce(function (acc, ch, i) {\n    return acc + (i % 2 ? 3 : 1) * Number(ch);\n  }, 0);\n\n  remainder = (10 - (remainder % 10)) % 10;\n  return values + '-' + String(remainder);\n}\n\nfunction generate_base8_ean() {\n  var values = Charlatan.regexify(/\\d{7}/);\n  var remainder = values.split('').reduce(function (acc, ch, i) {\n    return acc + (i % 2 ? 1 : 3) * Number(ch);\n  }, 0);\n\n  remainder = (10 - (remainder % 10)) % 10;\n  return values + String(remainder);\n}\n\nfunction generate_base13_ean() {\n  var values = Charlatan.regexify(/\\d{12}/);\n  var remainder = values.split('').reduce(function (acc, ch, i) {\n    return acc + (i % 2 ? 3 : 1) * Number(ch);\n  }, 0);\n\n  remainder = (10 - (remainder % 10)) % 10;\n  return values + String(remainder);\n}\n\nfunction rut_verificator_digit(rut) {\n  var verif_digits = '3 2 7 6 5 4 3 2'.split(' ');\n\n  var total = ('00000000' + rut).slice(-8).split('').reduce(function (acc, ch, i) {\n    return acc + ch * verif_digits[i];\n  }, 0);\n\n  return (11 - total % 11).toString().replace(/10/, 'k').replace(/11/, '0');\n}\n\n\n/**\n * Charlatan.Code.isbn(base=10) -> String\n *  - base(Number): isbn code type\n *\n * Generate ISBN.\n *\n * By default generates 10 sign isbn code in format 123456789-X\n * You can pass 13 to generate new 13 sign code.\n **/\nexports.isbn = function (base) {\n  return Number(base) === 13 ? generate_base13_isbn() : generate_base10_isbn();\n};\n\n\n/**\n * Charlatan.Code.ean(base=13) -> String\n *  - base(Number): ean code type\n *\n * Generate EAN.\n *\n * By default generates 13 sign ean code in format 1234567890123\n * You can pass 8 to generate ean8 code\n **/\nexports.ean = function (base) {\n  return Number(base) === 8 ? generate_base8_ean() : generate_base13_ean();\n};\n\n\n/**\n * Charlatan.Code.rut() -> String\n *\n * Generate RUT.\n **/\nexports.rut = function () {\n  var value = String(Charlatan.Number.number(8));\n\n  return value + '-' + String(rut_verificator_digit(value));\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/commerce.js":"'use strict';\n\n/**\n * class Charlatan.Commerce\n **/\n\n\nvar Charlatan = require('../charlatan');\nvar Helpers = require('./helpers');\n\n\nfunction get_categories(num) {\n  var categories = [], tries = 0;\n\n  while (categories.length < num) {\n    var category = Charlatan.fetch('commerce.department');\n\n    if (categories.indexOf(category) === -1) {\n      categories.push(category);\n    }\n\n    if (tries++ > 100) {\n      // original ruby stuff could infinitely loop here\n      break;\n    }\n  }\n  return categories;\n}\n\nfunction merge_categories(categories) {\n  var separator = Charlatan.fetch('separator');\n  var comma_separated = categories.slice(1).join(', ');\n\n  return [ comma_separated, categories[0] ].join(separator);\n}\n\n/**\n * Charlatan.Commerce.color() -> String\n *\n * Generate color name\n **/\nexports.color = function () {\n  return Charlatan.fetch('commerce.color');\n};\n\n\n/**\n * Charlatan.Commerce.department(max=3, fixed_amount=false) -> String\n *  - max(Number): number of categories\n *  - fixed_amount(Boolean): always return max amount of them\n *\n * Generate department name\n **/\nexports.department = function (max, fixed_amount) {\n  if (typeof max !== 'number') {\n    max = 3;\n  }\n\n  var num;\n\n  if (fixed_amount) {\n    num = max;\n  } else {\n    num = Helpers.rand(max + 1, 1);\n  }\n\n  var categories = get_categories(num);\n\n  if (num > 1) {\n    return merge_categories(categories);\n  }\n  return categories[0];\n};\n\n\n/**\n * Charlatan.Commerce.productName() -> String\n *\n * Generate product name\n **/\nexports.productName = function () {\n  return Charlatan.fetch('commerce.product_name.adjective') + ' ' +\n    Charlatan.fetch('commerce.product_name.material') + ' ' +\n    Charlatan.fetch('commerce.product_name.product');\n};\n\n\n\n/**\n * Charlatan.Commerce.price() -> Float\n *\n * Generate price\n **/\nexports.price = function () {\n  return Charlatan.Helpers.rand(100, 0) +\n    Math.floor(Charlatan.Helpers.rand(100, 0)) / 100.0;\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/helpers.js":"'use strict';\n\n/**\n * class Charlatan.Helpers\n **/\n\nvar titleizeSmallWords = [ 'a', 'an', 'and', 'as', 'at', 'but', 'by',\n      'en', 'for', 'if', 'in', 'of', 'on', 'or', 'the', 'to', 'v',\n      'v.', 'via', 'vs', 'vs.' ];\n\n/**\n * Charlatan.Helpers.rand(max, min = 0) -> Integer\n * - max (number): max value in range (exclusive)\n * - min (number): min value in range (inclusive)\n *\n * Returns a single random number in range `[min, max)`,\n * including `min` but excluding `max`.\n **/\nexports.rand = function (max, min) {\n  if (!min) {\n    min = 0;\n  }\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\n\n/**\n * Charlatan.Helpers.sample(source) -> Mixin\n * - source(array): source array\n *\n * Returns random element from source array\n **/\nexports.sample = function (source) {\n  return source[exports.rand(source.length)];\n};\n\n\n/**\n * Charlatan.Helpers.shuffle(source) -> Array\n * - source(array): source array\n *\n * Takes an array and returns it randomized\n **/\nexports.shuffle = function (source) {\n  var result = source.slice(),\n      i, p, tmp;\n\n  for (i = 0; i < source.length; i++) {\n    p = parseInt(Math.random() * source.length, 10);\n    tmp = result[i];\n    result[i] = result[p];\n    result[p] = tmp;\n  }\n  return result;\n};\n\n\n/**\n * Charlatan.Helpers.capitalize(str) -> String\n * - str(string): source string\n *\n * Capitalize first letter\n **/\nvar capitalize = exports.capitalize = function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n\n/**\n * Charlatan.Helpers.titleize() -> String\n * - title(string): source string\n *\n * Capitalizes most words to create a nicer looking title string.\n * The list of \"small words\" which are not capped comes from\n * the New York Times Manual of Style, plus 'vs' and 'v'.\n **/\nexports.titleize = function (title) {\n  var i;\n  var words = title.toLowerCase().split(' ');\n\n  // first word is always capitalised\n  words[0] = capitalize(words[0]);\n\n  for (i = 1; i < words.length; i++) {\n    if (titleizeSmallWords.indexOf(words[i]) === -1) {\n      words[i] = capitalize(words[i]);\n    }\n  }\n  return words.join(' ');\n};\n\n\n/**\n * Charlatan.Helpers.range(from, to) -> String | Number\n * - from(String | Number): starting character\n * - to(String | Number): ending character\n *\n * Return all numbers or characters from `from` to `to`.\n *\n * If input values are strings, this method returns strings,\n * if they are numbers, it will return a number array.\n *\n * For example, `range(\"A\", \"D\")` will return `[\"A\", \"B\", \"C\", \"D\"]`.\n **/\nexports.range = function (from, to) {\n  var i, stringify = false, result = [];\n\n  if (typeof from === 'string' && typeof to === 'string') {\n    stringify = true;\n    from = from.charCodeAt(0);\n    to = to.charCodeAt(0);\n  }\n\n  for (i = from; i <= to; i++) {\n    result.push(i);\n  }\n\n  return stringify ?\n         result.map(function (x) { return String.fromCharCode(x); }) :\n         result;\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/company.js":"'use strict';\n\n/**\n * class Charlatan.Company\n **/\n\nvar Helpers = require('./helpers');\nvar Charlatan = require('../charlatan');\n\n\n/**\n * Charlatan.Company.name() -> String\n *\n * Generate company name\n *\n **/\nexports.name = function () {\n  return Charlatan.parse('company.name');\n};\n\n\n/**\n * Charlatan.Company.suffix() -> String\n *\n * Return random suffix, for example \"Inc\"\n *\n **/\nexports.suffix = function () {\n  return Charlatan.fetch('company.suffix');\n};\n\n\n/**\n * Charlatan.Company.catchPhrase() -> String\n *\n * Generate a buzzword-laden catch phrase.\n **/\nexports.catchPhrase = function () {\n  return Charlatan.translate('company.buzzwords').map(function (list) {\n    return Helpers.sample(list);\n  }).join(' ');\n};\n\n\n/**\n * Charlatan.Company.bs() -> String\n *\n * When a straight answer won't do, BS to the rescue!\n **/\nexports.bs = function () {\n  return Charlatan.translate('company.bs').map(function (list) {\n    return Helpers.sample(list);\n  }).join(' ');\n};\n\n\n/**\n * Charlatan.Company.ein() -> String\n *\n * Generate ein\n **/\nexports.ein = function () {\n  return Math.random().toFixed(2).slice(2) + '-' +\n         Math.random().toFixed(7).slice(2);\n};\n\n\n/**\n * Charlatan.Company.dunsNumber() -> String\n *\n * Generate duns\n **/\nexports.dunsNumber = function () {\n  return Math.random().toFixed(2).slice(2) + '-' +\n         Math.random().toFixed(3).slice(2) + '-' +\n         Math.random().toFixed(4).slice(2);\n};\n\n\n/**\n * Charlatan.Company.logo () -> String\n *\n * Get a random company logo url in PNG format.\n **/\nexports.logo = function () {\n  var rand_num = Charlatan.Helpers.rand(13) + 1;\n\n  return 'http://pigment.github.io/fake-logos/logos/medium/color/' + rand_num + '.png';\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/date.js":"'use strict';\n\n/**\n * class Charlatan.Date\n **/\n\nvar Helpers = require('./helpers');\n\n\n/**\n * Charlatan.Date.between(from, to) -> Date\n *  - from(Number | String | Date): start of the interval\n *  - to(Number | String | Date): end of the interval\n *\n * Generate a random date in the given interval.\n **/\nexports.between = function (from, to) {\n  from = typeof from === 'number' ? from : Date.parse(from);\n  to = typeof to === 'number' ? to : Date.parse(to);\n\n  return new Date(Helpers.rand(Math.max(from, to) + 1, Math.min(from, to)));\n};\n\n\n/**\n * Charlatan.Date.forward(days=365) -> Date\n *  - days(Number): maximum amount of days after this one\n *\n * Generate a random date after current one.\n **/\nexports.forward = function (days) {\n  if (typeof days !== 'number') {\n    days = 365;\n  }\n\n  var from = Date.now() + 24 * 60 * 60 * 1000;\n  var to   = Date.now() + 24 * 60 * 60 * 1000 * days;\n\n  return exports.between(from, to);\n};\n\n\n/**\n * Charlatan.Date.backward(days=365) -> Date\n *  - days(Number): maximum amount of days before this one\n *\n * Generate a random date before current one.\n **/\nexports.backward = function (days) {\n  if (typeof days !== 'number') {\n    days = 365;\n  }\n\n  var from = Date.now() - 24 * 60 * 60 * 1000;\n  var to   = Date.now() - 24 * 60 * 60 * 1000 * days;\n\n  return exports.between(from, to);\n};\n\n\n/**\n * Charlatan.Date.birthday(min_age=18, max_age=65) -> Date\n *  - min_age(Number): min age\n *  - max_age(Number): max age\n *\n * Generate a random birthday for people of given age.\n **/\nexports.birthday = function (min_age, max_age) {\n  if (typeof min_age !== 'number') {\n    min_age = 18;\n  }\n\n  if (typeof max_age !== 'number') {\n    max_age = 65;\n  }\n\n  var t    = new Date();\n  var from = new Date(t.getFullYear() - min_age, t.getMonth(), t.getDay());\n  var to   = new Date(t.getFullYear() - max_age, t.getMonth(), t.getDay());\n\n  return exports.between(from, to);\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/finance.js":"'use strict';\n\n/**\n * class Charlatan.Finance\n **/\n\n\nvar Charlatan = require('../charlatan');\nvar Helpers   = require('./helpers');\n\n\nvar CREDIT_CARD_TYPES = [ 'visa', 'mastercard', 'discover', 'american_express',\n  'diners_club', 'jcb', 'switch', 'solo', 'dankort', 'maestro',\n  'forbrugsforeningen', 'laser' ];\n\n\n/**\n * Charlatan.Finance.creditCard([types]) -> String\n *  - types(Array): generate card for one of these vendors ('visa', 'mastercard', etc.)\n *\n * Generate a card number with prefix belonging to one of the existing\n * payment processors.\n **/\nexports.creditCard = function (types) {\n  if (!types) {\n    types = CREDIT_CARD_TYPES;\n  }\n\n  if (!Array.isArray(types)) {\n    types = [ types ];\n  }\n\n  var type = Helpers.sample(types);\n  var template = Charlatan.numerify(Charlatan.fetch('credit_card.' + type));\n\n  // calculate the luhn checksum digit\n  var multiplier = 1;\n  var luhn_sum = template\n      .replace(/[^0-9]/g, '')\n      .split('')\n      .reduceRight(function (sum, digit) {\n        multiplier = (multiplier === 2 ? 1 : 2);\n        return sum + Number(\n          String(digit * multiplier).split('').reduce(\n            function (a, b) { return Number(a) + Number(b); }\n          )\n        );\n      }, 0);\n\n  // the sum plus whatever the last digit is must be a multiple of 10. So, the\n  // last digit must be 10 - the last digit of the sum.\n  var luhn_digit = (10 - (luhn_sum % 10)) % 10;\n\n  return template.replace(/L/g, luhn_digit);\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/hacker.js":"'use strict';\n\n/**\n * class Charlatan.Hacker\n **/\n\nvar Helpers = require('./helpers');\nvar Charlatan = require('../charlatan');\n\n\n/**\n * Charlatan.Hacker.abbreviation() -> String\n *\n * Generate an abbreviation\n **/\nvar abbreviation = exports.abbreviation = function () {\n  return Charlatan.fetch('hacker.abbreviation');\n};\n\n\n/**\n * Charlatan.Hacker.adjective() -> String\n *\n * Generate \"hacker\" adjective\n **/\nvar adjective = exports.adjective = function () {\n  return Charlatan.fetch('hacker.adjective');\n};\n\n\n/**\n * Charlatan.Hacker.noun() -> String\n *\n * Generate \"hacker\" noun\n **/\nvar noun = exports.noun = function () {\n  return Charlatan.fetch('hacker.noun');\n};\n\n\n/**\n * Charlatan.Hacker.verb() -> String\n *\n * Generate \"hacker\" verb\n **/\nvar verb = exports.verb = function () {\n  return Charlatan.fetch('hacker.verb');\n};\n\n\n/**\n * Charlatan.Hacker.ingverb() -> String\n *\n * Generate \"hacker\" ingverb\n **/\nvar ingverb = exports.ingverb = function () {\n  return Charlatan.fetch('hacker.ingverb');\n};\n\n\nfunction phrases() {\n  /* eslint-disable max-len, no-implicit-coercion */\n  return [\n    'If we ' + verb() + ' the ' + noun() + ', we can get to the ' + abbreviation() + ' ' + noun() + ' through the ' + adjective() + ' ' + abbreviation() + ' ' + noun() + '!',\n    'We need to ' + verb() + ' the ' + adjective() + ' ' + abbreviation() + ' ' + noun() + '!',\n    'Try to ' + verb() + ' the ' + abbreviation() + ' ' + noun() + ', maybe it will ' + verb() + ' the ' + adjective() + ' ' + noun() + '!',\n    'You can\\'t ' + verb() + ' the ' + noun() + ' without ' + ingverb() + ' the ' + adjective() + ' ' + abbreviation() + ' ' + noun() + '!',\n    'Use the ' + adjective() + ' ' + abbreviation() + ' ' + noun() + ', then you can ' + verb() + ' the ' + adjective() + ' ' + noun() + '!',\n    'The ' + abbreviation() + ' ' + noun() + ' is down, ' + verb() + ' the ' + adjective() + ' ' + noun() + ' so we can ' + verb() + ' the ' + abbreviation() + ' ' + noun() + '!',\n    '' + ingverb() + ' the ' + noun() + ' won\\'t do anything, we need to ' + verb() + ' the ' + adjective() + ' ' + abbreviation() + ' ' + noun() + '!',\n    'I\\'ll ' + verb() + ' the ' + adjective() + ' ' + abbreviation() + ' ' + noun() + ', that should ' + noun() + ' the ' + abbreviation() + ' ' + noun() + '!'\n  ];\n}\n\n\n/**\n * Charlatan.Hacker.saySomethingSmart() -> String\n *\n * Generate a smart looking phrase\n **/\nexports.saySomethingSmart = function () {\n  return Helpers.sample(phrases());\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/internet.js":"'use strict';\n\n/**\n * class Charlatan.Internet\n **/\n\n\nvar Helpers   = require('./helpers');\nvar Charlatan = require('../charlatan');\n\n\nfunction fix_umlauts(string) {\n  return string.replace(/[äöüß]/ig, function (str) {\n    switch (str.toLowerCase()) {\n      case 'ä': return 'ae';\n      case 'ö': return 'oe';\n      case 'ü': return 'ue';\n      case 'ß': return 'ss';\n    }\n    return str;\n  });\n}\n\n\n/**\n * Charlatan.Internet.email([name]) -> String\n * - name (string) : user name, optional\n *\n * Generate email :-)\n **/\nexports.email = function (name) {\n  return exports.userName(name) + '@' + exports.domainName();\n};\n\n\n/**\n * Charlatan.Internet.freeEmail([name]) -> String\n * - name (string) : user name, optional\n *\n * Generate email in public domain such as gmail and hotmail\n **/\nexports.freeEmail = function (name) {\n  return exports.userName(name) + '@' + Charlatan.fetch('internet.free_email');\n};\n\n\n/**\n * Charlatan.Internet.safeEmail([name]) -> String\n * - name (string) : user name, optional\n *\n * Generate email in example.[org|com|net]\n **/\nexports.safeEmail = function (name) {\n  var domain = 'example.' + Helpers.sample([ 'org', 'com', 'net' ]);\n\n  return exports.userName(name) + '@' + domain;\n};\n\n\n/**\n * Charlatan.Internet.userName([name]) -> String\n * - name (string) : user name, optional\n *\n * Generate nickname.\n **/\nexports.userName = function (specifier, separators) {\n  var result;\n\n  if (!separators) { separators = [ '.', '_' ]; }\n\n  if (typeof specifier === 'string') {\n    return Helpers.shuffle(specifier.match(/\\w+/g))\n             .join(Helpers.sample(separators))\n             .toLowerCase();\n  }\n\n  if (typeof specifier === 'number') {\n    var tries = 0; // Don't try forever in case we get something like 1_000_000.\n\n    do {\n      result = exports.userName(null, separators);\n      tries++;\n    } while (result.length < specifier && tries < 7);\n\n    while (result.length < specifier) {\n      result += result;\n    }\n\n    return result;\n  }\n\n  return fix_umlauts(Helpers.sample([\n    function () {\n      return Charlatan.Name.firstName().replace(/\\W/g, '').toLowerCase();\n    },\n    function () {\n      return [ Charlatan.Name.firstName(), Charlatan.Name.lastName() ]\n        .join(Helpers.sample(separators))\n        .replace(/\\W/g, '')\n        .toLowerCase();\n    }\n  ])());\n};\n\n/**\n * Charlatan.Internet.password(minLength=8, maxLength=16) -> String\n * - minLength (integer) : min number of characters in generated password\n * - maxLength (integer) : max number of characters in generated password\n *\n * Generate an alphanumeric password\n **/\nexports.password = function (minLength, maxLength) {\n  if (typeof minLength !== 'number') { minLength = 8; }\n  if (typeof maxLength !== 'number') { maxLength = 16; }\n\n  maxLength = Math.max(minLength + 1, maxLength);\n\n  return Charlatan.Lorem.characters(Helpers.rand(maxLength + 1, minLength));\n};\n\n/**\n * Charlatan.Internet.domainName() -> String\n *\n * Generate domain name.\n **/\nexports.domainName = function () {\n  return fix_umlauts(exports.domainWord()) + '.' + exports.domainSuffix();\n};\n\n\n/**\n * Charlatan.Internet.domainWord() -> String\n *\n * Generate domain component\n **/\nexports.domainWord = function () {\n  return Charlatan.Company.name()\n          .split(' ')[0]\n          .replace(/\\W/g, '')\n          .toLowerCase();\n};\n\n\n/**\n * Charlatan.Internet.domainSuffix() -> String\n *\n * Return TLD, e.g. \"com\"\n **/\nexports.domainSuffix = function () {\n  // lorem can return word with apostrophe\n  return Charlatan.fetch('internet.domain_suffix');\n};\n\n\n/**\n * Charlatan.Internet.IPv4() -> String\n *\n * Generate an IPv4 address\n **/\nexports.IPv4 = function () {\n  var i, result = [];\n\n  for (i = 0; i < 4; i++) {\n    result[i] = Helpers.rand(255, 1); // 1..254\n  }\n\n  return result.join('.');\n};\n\n\n/**\n * Charlatan.Internet.macAddress(prefix='') -> String\n *  - prefix(String) : prefix\n *\n * Generate a mac address\n **/\nexports.macAddress = function (prefix) {\n  if (!prefix) { prefix = ''; }\n\n  var digits = [];\n\n  if (prefix) {\n    digits = prefix.split(':').map(function (d) {\n      return parseInt(d, 16) || 0;\n    });\n  }\n\n  for (var i = 6 - digits.length; i > 0; i--) {\n    digits.push(Helpers.rand(256));\n  }\n\n  return digits.map(function (d) {\n    return ('00' + d.toString(16)).slice(-2);\n  }).join(':');\n};\n\n\n/**\n * Charlatan.Internet.IPv6() -> String\n *\n * Generate an IPv6 address\n **/\nexports.IPv6 = function () {\n  var group, result = [], i, j;\n\n  for (i = 0; i < 8; i++) {\n    group = '';\n    for (j = 0; j < 4; j++) {\n      group += Helpers.rand(16).toString(16);\n    }\n    result.push(group);\n  }\n\n  return result.join(':');\n};\n\n\n/**\n * Charlatan.Internet.IPv6([domain, path]) -> String\n *  - domain(String): domain name\n *  - path(String): path name\n *\n * Generate an url address\n **/\nexports.url = function (host, path) {\n  if (!host) {\n    host = exports.domainName();\n  }\n\n  if (!path) {\n    path = '/' + exports.userName();\n  }\n\n  return 'http://' + host + path;\n};\n\n\n/**\n * Charlatan.Internet.IPv6([words, glue]) -> String\n *  - words(String): words array (by default it fetches lorem.words)\n *  - glue(String): character that separates words\n *\n * Build slug out of a words array\n **/\nexports.slug = function (words, glue) {\n  if (!glue) {\n    glue = Helpers.sample('-_.'.split(''));\n  }\n\n  if (!words) {\n    words = Charlatan.Lorem.words(2);\n  }\n\n  if (Array.isArray(words)) {\n    words = words.join(' ');\n  }\n\n  return words\n           .replace(/ /g, glue)\n           .toLowerCase();\n};\n\n\n/**\n * Charlatan.Internet.deviceToken() -> String\n *\n * Generate an APN token\n **/\nexports.deviceToken = function () {\n  var i, result = '';\n\n  for (i = 0; i < 64; i++) {\n    result += Helpers.rand(16).toString(16);\n  }\n\n  return result;\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/lorem.js":"'use strict';\n\n/**\n * class Charlatan.Lorem\n **/\n\nvar Helpers = require('./helpers');\nvar Charlatan = require('../charlatan');\n\n\nfunction isNotSet(variable) {\n  return typeof variable === 'undefined' || variable === null;\n}\n\n\n/** internal\n * resolve(value) -> String\n *  - value(String | Array): stuff\n *\n * If an array is passed, a random value will be selected.\n * All other values are simply returned.\n *\n * Note: ruby supports ranges here, we don't\n **/\nfunction resolve(value) {\n  if (Array.isArray(value)) {\n    return Helpers.sample(value);\n  }\n\n  return value;\n}\n\n/**\n * Charlatan.Lorem.word () -> String\n *\n * Generate random word\n **/\nexports.word = function () {\n  return Helpers.sample(Charlatan.translate('lorem.words'));\n};\n\n/**\n * Charlatan.Lorem.words(wordCount = 3, supplemental = false) -> Array\n * - wordCount(Number): number of words in output\n * - supplemental(Boolean): use additional words\n *\n * Generate an array of random words\n **/\nexports.words = function (wordCount, supplemental) {\n\n  if (isNotSet(wordCount)) {\n    wordCount = 3;\n  }\n\n  var words = Charlatan.translate('lorem.words');\n\n  if (supplemental) {\n    words = words.concat(Charlatan.translate('lorem.supplemental'));\n  }\n\n  var result = [];\n\n  for (var i = 0, l = resolve(wordCount); i < l; i++) {\n    result.push(Helpers.sample(words));\n  }\n  return result;\n};\n\n\n/**\n * Charlatan.Lorem.character() -> String\n *\n * Generate a character\n **/\nexports.character = function () {\n  return exports.characters(1);\n};\n\n\n/**\n * Charlatan.Lorem.characters(charCount=255) -> String\n * - charCount(Integer): number of characters in result\n *\n * Generate lorem characters\n **/\nexports.characters = function (charCount) {\n  if (typeof charCount === 'undefined' || charCount === null) { charCount = 255; }\n\n  var result = '';\n\n  for (var i = 0, l = resolve(charCount); i < l; i++) {\n    result += Helpers.rand(36).toString(36);\n  }\n\n  return result;\n};\n\n/**\n * Charlatan.Lorem.sentence(wordCount=4, supplemental=false, randomWordsToAdd=6) -> String\n * - wordCount(Integer): number of words in sentence. If null, then it's random greater than 3\n * - supplemental(Boolean): use additional words\n * - randomWordsToAdd(Integer): additional count of random words\n *\n * Generate lorem sentence\n **/\nexports.sentence = function (wordCount, supplemental, randomWordsToAdd) {\n  var sentence;\n\n  if (isNotSet(wordCount)) {\n    wordCount = 4;\n  }\n\n  if (isNotSet(randomWordsToAdd)) {\n    randomWordsToAdd = 6;\n  }\n\n  sentence = exports.words(wordCount + Helpers.rand(randomWordsToAdd), supplemental).join(' ') + '.';\n\n  return Helpers.capitalize(sentence);\n};\n\n\n/**\n * Charlatan.Lorem.sentences(sentenceCount=3, supplemental=false) -> Array\n * - sentenceCount(Number): number of sentences in output\n * - supplemental(Boolean): use additional words\n *\n * Generate array of lorem sentences\n **/\nexports.sentences = function (sentenceCount, supplemental) {\n  var sentences = [];\n\n  if (isNotSet(sentenceCount)) {\n    sentenceCount = 3;\n  } else {\n    sentenceCount = resolve(sentenceCount);\n  }\n\n  for (; sentenceCount > 0; sentenceCount--) {\n    sentences.push(exports.sentence(null, supplemental));\n  }\n\n  return sentences;\n};\n\n\n/**\n * Charlatan.Lorem.paragraph(sentenceCount=3, supplemental=false, randomWordsToAdd=3) -> String\n * - sentenceCount(Number): number of sentences in a paragraph\n * - supplemental(Boolean): use additional words\n * - randomWordsToAdd(Integer): additional count of random words\n *\n * Generate lorem paragraph\n **/\nexports.paragraph = function (sentenceCount, supplemental, randomSentencesToAdd) {\n  if (isNotSet(sentenceCount)) {\n    sentenceCount = 3;\n  } else {\n    sentenceCount = resolve(sentenceCount);\n  }\n\n  if (isNotSet(randomSentencesToAdd)) {\n    randomSentencesToAdd = 3;\n  }\n\n  return exports.sentences(sentenceCount + Helpers.rand(randomSentencesToAdd), supplemental).join(' ');\n};\n\n\n/**\n * Charlatan.Lorem.paragraphs(paragraphCount=3, sentenceCount=false) -> Array\n * - paragraphCount(Integer): number of paragraphs in the output\n * - supplemental(Boolean): use additional words\n *\n * Generate an array of lorem paragraphs\n **/\nexports.paragraphs = function (paragraphCount, supplemental) {\n  var paragraphs = [];\n\n  if (isNotSet(paragraphCount)) {\n    paragraphCount = 3;\n  } else {\n    paragraphCount = resolve(paragraphCount);\n  }\n\n  for (; paragraphCount > 0; paragraphCount--) {\n    paragraphs.push(exports.paragraph(null, supplemental));\n  }\n\n  return paragraphs;\n};\n\n\n/**\n * Charlatan.Lorem.text(paragraphCount, sentenceCount, glue) -> String\n * - paragraphCount(integer): number of paragraphs in the output\n * - supplemental (boolean): use additional words\n * - glue (string): glue between paragraphs, `\\n \\r\\t` by default\n *\n * Generate text\n **/\nexports.text = function (paragraphCount, supplemental, glue) {\n  if (isNotSet(glue)) {\n    glue = '\\n \\r\\t';\n  }\n\n  return exports.paragraphs(paragraphCount, supplemental).join(glue);\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/name.js":"'use strict';\n\n/**\n * class Charlatan.Name\n **/\n\n\nvar Charlatan = require('../charlatan');\n\n/**\n * Charlatan.Name.name() -> String\n *\n * Generate full name.\n **/\nexports.name = function () {\n  return Charlatan.parse('name.name');\n};\n\n\n/**\n * Charlatan.Name.firstName() -> String\n *\n * Generate first name. Example: 'Marjorie'\n **/\nexports.firstName = function () {\n  return Charlatan.fetch('name.first_name');\n};\n\n\n/**\n * Charlatan.Name.lastName() -> String\n *\n * Generate last name. Example: 'Lemke'\n **/\nexports.lastName = function () {\n  return Charlatan.fetch('name.last_name');\n};\n\n\n/**\n * Charlatan.Name.prefix() -> String\n *\n * Generate name prefix. Example: 'Dr.'\n **/\nexports.prefix = function () {\n  return Charlatan.fetch('name.prefix');\n};\n\n\n/**\n * Charlatan.Name.suffix() -> String\n *\n * Generate name suffix. Example: 'PhD'\n **/\nexports.suffix = function () {\n  return Charlatan.fetch('name.suffix');\n};\n\n\n/**\n * Charlatan.Name.title() -> String\n *\n * Generate a buzzword-laden job title\n * Wordlist from http://www.bullshitjob.com/title/\n **/\nexports.title = function () {\n  return Charlatan.fetch('name.title.descriptor') + ' ' +\n          Charlatan.fetch('name.title.level') + ' ' +\n          Charlatan.fetch('name.title.job');\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/number.js":"'use strict';\n\n/**\n * class Charlatan.Number\n **/\n\nvar Helpers = require('./helpers');\n\n\n/**\n * Charlatan.Number.number(digits) -> String\n *  - digits(Number): an amount of digits in there\n *\n * Generate a base 10 number\n **/\nexports.number = function (digits) {\n  var result = '';\n\n  for (var i = 0; i < digits; i++) {\n    result += Helpers.rand(10, 0).toString(10);\n  }\n\n  return result;\n};\n\n\n/**\n * Charlatan.Number.decimal(l_digits, r_digits=2) -> String\n *  - l_digits(Number): an amount of digits in the integer part\n *  - r_digits(Number): an amount of digits in the fractional part\n *\n * Generate a decimal number\n **/\nexports.decimal = function (l_digits, r_digits) {\n  if (typeof r_digits !== 'number') {\n    r_digits = 2;\n  }\n\n  return exports.number(l_digits) + '.' + exports.number(r_digits);\n};\n\n\n/**\n * Charlatan.Number.digit() -> String\n *\n * Generate a base 10 digit\n **/\nexports.digit = function () {\n  return String(Helpers.rand(10, 0));\n};\n\n\n/**\n * Charlatan.Number.hexadecimal(digits) -> String\n *  - digits(Number): an amount of digits in there\n *\n * Generate a base 16 number\n **/\nexports.hexadecimal = function (digits) {\n  var result = '';\n\n  for (var i = 0; i < digits; i++) {\n    result += Helpers.rand(16, 0).toString(16);\n  }\n\n  return result;\n};\n\n\n/**\n * Charlatan.Number.between(from=1, to=5000) -> Number\n *  - from(Number): range start\n *  - to(Number): range end\n *\n * Generate a number between `from` and `to`\n **/\nexports.between = function (from, to) {\n  if (typeof from !== 'number') {\n    from = 1;\n  }\n\n  if (typeof to !== 'number') {\n    to = 5000;\n  }\n\n  return Helpers.rand(Math.max(from, to) + 1, Math.min(from, to));\n};\n\n\n/**\n * Charlatan.Number.positive(from=1, to=5000) -> Number\n *  - from(Number): range start\n *  - to(Number): range end\n *\n * Generate a positive number between `from` and `to`\n **/\nexports.positive = function (from, to) {\n  if (typeof from !== 'number') {\n    from = 1;\n  }\n\n  if (typeof to !== 'number') {\n    to = 5000;\n  }\n\n  return Math.abs(exports.between(from, to));\n};\n\n\n/**\n * Charlatan.Number.negative(from=-5000, to=-1) -> Number\n *  - from(Number): range start\n *  - to(Number): range end\n *\n * Generate a negative number between `from` and `to`\n **/\nexports.negative = function (from, to) {\n  if (typeof from !== 'number') {\n    from = -5000;\n  }\n\n  if (typeof to !== 'number') {\n    to = -1;\n  }\n\n  return -Math.abs(exports.between(from, to));\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/phone_number.js":"'use strict';\n\n/**\n * class Charlatan.PhoneNumber\n **/\n\n\nvar Charlatan = require('../charlatan');\n\n\n/**\n * Charlatan.PhoneNumber.phoneNumber() -> String\n *\n * Generate phone number.\n **/\nexports.phoneNumber = function () {\n  return Charlatan.numerify(Charlatan.parse('phone_number.formats'));\n};\n\n\n/**\n * Charlatan.PhoneNumber.cellPhone() -> String\n *\n * Generate cell phone number.\n **/\nexports.cellPhone = function () {\n  return Charlatan.numerify(Charlatan.parse('cell_phone.formats'));\n};\n\n\n/**\n * Charlatan.PhoneNumber.areaCode() -> String\n *\n * Generate an area code (US only).\n **/\nexports.areaCode = function () {\n  return Charlatan.fetch('phone_number.area_code');\n};\n\n\n/**\n * Charlatan.PhoneNumber.exchangeCode() -> String\n *\n * Return an exchange code (US only).\n **/\nexports.exchangeCode = function () {\n  return Charlatan.fetch('phone_number.exchange_code');\n};\n\n\n/**\n * Charlatan.PhoneNumber.subscriberNumber(length=4) -> String\n *  - length(Integer): extension length\n *\n * Return a number extension (US only).\n *\n * Can be used for both extensions and last four digits of phone number.\n * Since extensions can be of variable length, this method takes a length parameter\n **/\nexports.subscriberNumber = function (length) {\n  if (typeof length !== 'number') {\n    length = 4;\n  }\n\n  return Math.random().toFixed(length).slice(2);\n};\n\n\n/** alias of: Charlatan.PhoneNumber.subscriberNumber\n * Charlatan.PhoneNumber.extension() -> String\n **/\nexports.extension = exports.subscriberNumber;\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/charlatan/team.js":"'use strict';\n\n/**\n * class Charlatan.Team\n **/\n\nvar Charlatan = require('../charlatan');\nvar Helpers = require('./helpers');\n\n\n/**\n * Charlatan.Team.name() -> String\n *\n * Generate team name.\n **/\nexports.name = function () {\n  return Charlatan.fetch('team.name');\n};\n\n\n/**\n * Charlatan.Team.creature() -> String\n *\n * Generate team mascot.\n **/\nexports.creature = function () {\n  return Charlatan.fetch('team.creature');\n};\n\n\n/**\n * Charlatan.Team.state() -> String\n *\n * Generate team state.\n **/\nexports.state = function () {\n  return Helpers.titleize(Charlatan.fetch('faker.address.state'));\n};\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/locales.js":"// Exposts { locales, addLocale } to replace implementation\n// for browsers\n'use strict';\n\nvar yaml = require('js-yaml');\nvar fs   = require('fs');\nvar path = require('path');\n\n// locale files {<<locale_name>>: <<path_locale_file>>}\nvar available_locales = {};\n\n// already loaded locales {<<locale_name>>: <<locale_data>>}\nvar locales = {};\n\n/**\n * Charlatan.addLocale(name, data) -> void\n * - name (string): locale name, for example `en-US`\n * - data (object|string): locale hash or yaml file\n *\n * Load locale to Charlatan. Charlatan preload some\n * [locales](https://github.com/nodeca/charlatan/tree/master/lib)\n **/\nfunction addLocale(name, data) {\n  // if data not set, then check available\n  if (typeof data === 'undefined') {\n    if (!available_locales[name]) {\n      throw new Error('Locale not found:' + name);\n    }\n\n    data = available_locales[name];\n\n    // load base language, if exists\n    var lang = name.split('-')[0];\n\n    if (name !== lang && available_locales[lang]) {\n      addLocale(lang);\n    }\n  }\n\n  // data in file\n  if (typeof data === 'string') {\n    if (!fs.existsSync(data)) {\n      throw new Error('Config ' + data + ' not found');\n    }\n    data = yaml.safeLoad(fs.readFileSync(data, 'utf8'))[name];\n\n  }\n  locales[name] = data;\n\n  // compatibility layer for ruby Faker: we DON'T use intermediate\n  // level `faker`, but wish to have universal localizations.\n  // So, if `faker` section exists then its children moved 1 level up.\n  if (data.faker) {\n    Object.keys(data.faker).forEach(function (k) {\n      locales[name][k] = data.faker[k];\n    });\n  }\n\n  return true;\n}\n\nexports.locales = locales;\nexports.addLocale = addLocale;\n\n\n// fetch locales and init base locale\nvar locales_dir = path.resolve(__dirname, 'locales');\n\nfs.readdirSync(locales_dir).forEach(function (file) {\n  if (/\\.yml/.test(file)) {\n    available_locales[file.replace('.yml', '')] = path.join(locales_dir, file);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-charlatan/node_modules/charlatan/lib/locales_browser.js":"// Browser implementation of { locales, addLocale }\n//\n'use strict';\n\nvar locales = require('./locales_browser_data.json');\n\nfunction addLocale(name, data) {\n  // if data not set, then check available\n  if (typeof data === 'undefined') {\n    if (Object.keys(locales).indexOf(name) === -1) {\n      throw new Error('Locale not found:' + name);\n    }\n\n    // Do nothing because all locales already loaded\n    return true;\n  }\n\n  // data in file\n  if (typeof data === 'string') {\n    throw new Error('Charlatan: loading from file not supported in browser');\n  }\n\n  locales[name] = data;\n\n  // compatibility layer for ruby Faker: we DON'T use intermediate\n  // level `faker`, but wish to have universal localizations.\n  // So, if `faker` section exists then its children moved 1 level up.\n  if (data.faker) {\n    Object.keys(data.faker).forEach(function (k) {\n      locales[name][k] = data.faker[k];\n    });\n  }\n\n  return true;\n}\n\nexports.locales = locales;\nexports.addLocale = addLocale;\n"}